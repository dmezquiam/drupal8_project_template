<?php
/**
 * @file
 * Code for the Newsletter feature.
 */

include_once 'fe_newsletter.features.inc';


define('FE_NEWSLETTER_MAX_ARTICLES',    20);

/**
 * Implements hook_menu()
 */
function fe_newsletter_menu() {
  $items['email-bulletin/%'] = array(
    'page callback' => 'ijnet_newsletter_callback',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
  );
  $items['email-bulletin-archive'] = array(
    'page callback' => 'ijnet_newsletter_archive_callback',
    'access arguments' => TRUE,
  );
  $items['email-bulletin-archive/%'] = array(
    'page callback' => 'ijnet_newsletter_archive_by_nid_callback',
    'page arguments' => array(1),
    'access arguments' => TRUE,
  );
  $items['node/%/bulletin'] = array(
    'title' => 'Newsletter markup',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fe_newsletter_content_form'),
    'access callback' => 'ijnet_newsletter_access_callback',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_admin_paths()
 *
 * Declare a path to use the admin theme.
 */
function fe_newsletter_admin_paths() {
  $paths = array(
    'node/*/bulletin' => TRUE,
  );
  return $paths;
}

function ijnet_newsletter_callback($nid) {
  $node = node_load($nid);

  if ($node->type != 'bulletin_email') {
    drupal_goto('<front>');
  }

  // TODO: delivery callback
  print(theme('ijnet_newsletter', array('node' => node_load($nid))));
}

function ijnet_newsletter_archive_callback() {
  $nid = _ijnet_newsletter_get_last_newsletter_nid();

  return theme('ijnet_newsletter_content', array('node' => node_load($nid)));
}

function ijnet_newsletter_archive_by_nid_callback($nid = null) {
  if (node_load($nid)) {
    return theme('ijnet_newsletter_content', array('node' => node_load($nid)));
  }
  drupal_goto('email-bulletin-archive');
}

function _ijnet_newsletter_get_last_newsletter_nid() {
  global $language;
  $newsletter_lang = $language->language;
  $result = db_select('node', 'n')
    ->condition('n.type', 'bulletin_email')
    ->condition('n.language', $newsletter_lang)
    ->fields('n', array('nid'))
    ->orderBy('created', 'DESC')
    ->extend('PagerDefault')->limit(1)
    ->execute()
    ->fetch();
  $nid = $result->nid;

  return $nid;
}

function ijnet_newsletter_access_callback($nid) {
  $node = node_load($nid);
  if ($node->type != 'bulletin_email') {
    return FALSE;
  }
  return TRUE;
}


/**
 * Implements hook_theme()
 */
function fe_newsletter_theme() {
  $theme_path = drupal_get_path('module', 'fe_newsletter') . '/theme';
  $themes = array(

    'ijnet_newsletter' => array(
      'variables' => array(
        'node' => NULL,
      ),
      'template' => 'ijnet-newsletter',
      'path' => $theme_path,
    ),

    'ijnet_newsletter_content' => array(
      'variables' => array(
        'node' => NULL,
      ),
      'template' => 'ijnet-newsletter-content',
      'path' => $theme_path,
    ),

    'ijnet_newsletter_featured_contents' => array(
      'variables' => array(
        'featured_contents' => NULL
      ),
      'template' => 'ijnet-newsletter-featured-contents',
      'path' => $theme_path,
    ),
    'ijnet_newsletter_featured_content' => array(
      'variables' => array(
        'featured_content' => NULL
      ),
      'template' => 'ijnet-newsletter-featured-content',
      'path' => $theme_path,
    ),

    'ijnet_newsletter_advertisements' => array(
      'variables' => array(
        'advertisements' => NULL
      ),
      'template' => 'ijnet-newsletter-advertisements',
      'path' => $theme_path,
    ),
    'ijnet_newsletter_advertisement' => array(
      'variables' => array(
        'advertisement' => NULL
      ),
      'template' => 'ijnet-newsletter-advertisement',
      'path' => $theme_path,
    ),

    'ijnet_newsletter_opportunities' => array(
      'variables' => array(
        'opportunities' => NULL
      ),
      'template' => 'ijnet-newsletter-opportunities',
      'path' => $theme_path,
    ),
    'ijnet_newsletter_opportunity' => array(
      'variables' => array(
        'opportunity' => NULL
      ),
      'template' => 'ijnet-newsletter-opportunity',
      'path' => $theme_path,
    ),
  );

  return $themes;
}

/**
 * Implements template_preprocess_hook()
 */
function template_preprocess_ijnet_newsletter_content(&$vars) {
  $node = $vars['node'];

  $vars['newsletter_date'] = _fe_newsletter_get_newsletter_date($node);
  $vars['newsletter_images_path'] = drupal_get_path('module', 'fe_newsletter') . '/theme/images/';

  $vars['featured_contents'] = _fe_newsletter_get_featured_contents($node);
  $vars['advertisements'] = _fe_newsletter_get_advertisements($node);
  $vars['opportunities'] =_fe_newsletter_get_opportunities($node);
}

/**
 * Implements hook_preprocess_page(&$vars)
 */
function fe_newsletter_preprocess_page(&$vars) {
  if (arg(0) == 'email-bulletin-archive') {
    drupal_add_js(
      drupal_get_path('module', 'fe_newsletter') . '/js/fe_newsletter.js',
      'file'
    );
  }
}

function _fe_newsletter_get_newsletter_date($node) {
  $date = format_date(
    $node->created, 
    $type = 'custom', 
    $format = t('d F Y'), 
    $timezone = null, 
    $langcode = $node->language);
  return $date;
}

function _fe_newsletter_get_featured_contents($node) {
  $language = $node->language;

  $featured_contents = array();
  if (!empty($node->field_other_content)) {
    $featured_contents_nids = isset($node->field_other_content[$language]) ?
      $node->field_other_content[$language] :
      $node->field_other_content[LANGUAGE_NONE];
    foreach ($featured_contents_nids as $nid) {
      $featured_contents[] = _fe_newsletter_get_featured_content($nid['nid']);
    }
  }

  return $featured_contents;
}

function _fe_newsletter_get_featured_content($nid) {
  $node = node_load($nid);
  $language = $node->language;

  $featured_content = new stdClass();
  if (empty($node->field_image)) {
    $featured_content->image = NULL;
  } else {
    $featured_content->image = isset($node->field_image[$language]) ?
      $node->field_image[$language][0]['uri'] :
      $node->field_image[LANGUAGE_NONE][0]['uri'];
  }
  if (empty($node->title_field)) {
    $featured_content->title = NULL;
  } else {
    $featured_content->title = isset($node->title_field[$language]) ?
      $node->title_field[$language][0]['safe_value'] :
      $node->title_field[LANGUAGE_NONE][0]['safe_value'];
  }
  if (empty($node->summary)) {
    $featured_content->summary = NULL;
  } else {
    $featured_content->title = isset($node->body[$language]) ?
      $node->body[$language][0]['safe_summary'] :
      $node->body[LANGUAGE_NONE][0]['safe_summary'];
  }
  $featured_content->author = _fe_newsletter_get_author($nid);
  $featured_content->link = '/'.$language.'/' . drupal_get_path_alias('node/'.$nid, $language);

  return $featured_content;
}

function _fe_newsletter_get_author($nid) {
  $author = _fe_news_get_author($nid);

  $result = $author->profile_link ?
    l($author->name, $author->profile_link) :
    $author->name;

  return $result;
}

function _fe_newsletter_get_advertisements($node) {
  $language = $node->language;

  $advertisements = array();
  if (empty($node->field_advertisements)) {
  } else {
    $advertisements_nids = isset($node->field_advertisements[$language]) ?
      $node->field_advertisements[$language] :
      $node->field_advertisements[LANGUAGE_NONE];
    foreach ($advertisements_nids as $nid) {
      $advertisements[] = _fe_newsletter_get_advertisement($nid['nid']);
    }
  }
  
  return $advertisements;
}

function _fe_newsletter_get_advertisement($nid) {
  $node = node_load($nid);
  $language = $node->language;

  $advertisement = new stdClass();
  if (empty($node->field_image)) {
    $advertisement->image = NULL;
  } else {
    $advertisement->image = isset($node->field_image[$language]) ?
      $node->field_image[$language][0]['uri'] :
      $node->field_image[LANGUAGE_NONE][0]['uri'];
  }
  $advertisement->title = $node->title;
  if (empty($node->body)) {
    $advertisement->summary = NULL;
  } else {
    $advertisement->summary = isset($node->body[$language]) ?
      $node->body[$language][0]['safe_summary'] :
      $node->body[LANGUAGE_NONE][0]['safe_summary'];
  }
  $advertisement->link = '/'.$language.'/' . drupal_get_path_alias('node/'.$nid, $language);

  return $advertisement;
}

function _fe_newsletter_get_opportunities($node) {
  $language = $node->language;

  $opportunities = array();
  if (!empty($node->field_opportunities)) {
    $opportunities_nids = isset($node->field_opportunities[$language]) ?
      $node->field_opportunities[$language] :
      $node->field_opportunities[LANGUAGE_NONE];
    foreach ($opportunities_nids as $nid) {
      $opportunity = _fe_newsletter_get_opportunity($nid['nid']);
      if ($opportunity) {
        $opportunities[] = $opportunity;
      }
    }
  }
  $classified_opportunities = _fe_newsletter_classify_opportunities($opportunities);

  return $classified_opportunities;
}

function _fe_newsletter_get_opportunity($nid) {
  $node = node_load($nid);
  if (!isset($node->nid)) {
    return FALSE;
  }

  $language = $node->language;

  $opportunity = new stdClass();
  $opportunity->title = $node->title;
  if (empty($node->body)) {
    $opportunity->summary = NULL;
  } else {
    $opportunity->summary = isset($node->body[$language]) ?
      $node->body[$language][0]['safe_summary'] :
      $node->body[LANGUAGE_NONE][0]['safe_summary'];
  }
  if (empty($node->deadline_date)) {
    $opportunity->deadline_date = NULL;
  } else {
    $opportunity->deadline_date = isset($node->deadline_date[$language]) ?
      $node->deadline_date[$language][0]['value'] :
      $node->deadline_date[LANGUAGE_NONE][0]['value'];
  }
  if (empty($node->field_region)) {
    $opportunity->tid = NULL;
  } else {
    $opportunity->tid = isset($node->field_region[$language]) ?
      $node->field_region[$language][0]['tid'] :
      $node->field_region[LANGUAGE_NONE][0]['tid'];
  }
  $opportunity->link = '/'.$language.'/' . drupal_get_path_alias('node/'.$nid, $language);

  return $opportunity;
}

function _fe_newsletter_classify_opportunities($opportunities) {
  $classified_opportunities = array();
  $region_vocabulary = taxonomy_vocabulary_machine_name_load('region');
  $taxonomy_tree = taxonomy_get_tree($region_vocabulary->vid, $parent = 0, $max_depth = 1);
  $worldwide = $taxonomy_tree[0];
  $continents = taxonomy_get_tree($region_vocabulary->vid, $worldwide->tid, $max_depth = 1);

  $classified_opportunities[$worldwide->name] = array();
  foreach ($continents as $continent) {
    $classified_opportunities[$continent->name] = array();
  }

  foreach ($opportunities as $opportunity) {
    $opportunity->tid = isset($opportunity->tid) ? 
      $opportunity->tid :
      $worldwide->tid;
    $opportunities_parents = taxonomy_get_parents_all($opportunity->tid);
    $index = 0;
    if (sizeof($opportunities_parents) > 1) {
      $index = sizeof($opportunities_parents) - 2;
    }
    $classified_opportunities[$opportunities_parents[$index]->name][] = $opportunity;
  }

  return $classified_opportunities;
}

function fe_newsletter_content_form($form, &$form_state) {
  $nid = arg(1);
  $node = node_load($nid);
  $language = $node->language;
  $newsletter_content = theme('ijnet_newsletter', array('node' => $node));
  $newsletter_link = 
    '<div id="newsletter-link"><a href="' . 
    url('email-bulletin/' .  $nid) . 
    '" target="_blank">' . t("View the Newsletter") . '</a></div>';

  $form['newsletter_content'] = array(
    '#type' => 'textarea',
    '#title' => t(''),
    '#description' => t(''),
    '#default_value' => $newsletter_content,
    '#rows' => 20,
    '#field_prefix' => $newsletter_link,
  );

  return $form;
}

/**
 * Subscribe to newsletter form
 *
 * Form submits via AJAX. See: https://www.drupal.org/node/2081275
 */
function fe_newsletter_subscribe_form($form, &$form_state) {
  // Make these fields required.
  $form['#attributes']['class'][] = 'subscribe-form';
  $form['#prefix'] = '<div id="form-register-message"></div>';
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Your name'),
    '#required' => TRUE,
  );
  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email address'),
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
    '#attributes' => array('class'=>array('button-tiny')),
    '#ajax' => array(
      'callback' => 'fe_newsletter_subscribe_form_submit',
      'wrapper' => 'form-register-message'
    ),
    '#submit' => array('fe_newsletter_subscribe_form_submit'),
  );
  return $form;
}

function fe_newsletter_subscribe_form_submit($form, &$form_state) {

  global $language;

  // list ids from constant contact
  // TODO: make configurable
  $list_id = array(
    'und' => 1316537398,
    'en' =>  1316537398,
    'es' =>  1265529464,
    'ru' =>  1833122425,
    'pt-br' => 1485709704,
    'zh-hans' => 1876266686,
    'ar' =>  1385780866,
    'fa' =>  1321747649,
  );

  $user_email = $form_state['values']['email'];
  $name       = $form_state['values']['name'];

  $cc = constant_contact_create_object();
  $cc->set_action_type('contact');
  $contact = $cc->query_contacts($user_email);
  if ($contact) {
    $msg = t('Your email address is already subscribed');
  }
  else {
    // todo: figure out how to get constant contact to accept some
    // version of name field, this one does nothing
    $lists = array($list_id[$language->language]);
    // TODO: sacar hardcode
    $lists = array(1215755656);
    $fields = array(
      'EmailType' => 'HTML',
      'FirstName' => $name,
    );
    //$status = $cc->create_contact($user_email, $lists, $fields);
    $status = TRUE;
    if ($status) {
      $msg = '<div class="msj-submit success">' . t('Success, you are now subscribed to our mailing list') . '</div>';
    }   
    else {
      $msg = '<div class="msj-submit sorry">' . t('Sorry, there was a problem, please ensure your details are valid and try again') . '</div>';
    }
  }
  // Process form submission.
  $commands = array(
    ajax_command_replace('#form-register-message', $msg),
  );
  $replace = array('#type' => 'ajax', '#commands' => $commands);
  return $replace;
}

/**
 * Implements hook_node_presave().
 *
 * Add node news, videos and avertisements to newsletter on save.
 */
function fe_newsletter_node_presave($node) {

  // Only handle bulletin emails
  if ($node->type != 'bulletin_email') {
    return;
  }
  $newsletter_lang = $node->language;

  $from_date = isset($node->field_from_date[LANGUAGE_NONE][0]['value']) 
    ? strtotime($node->field_from_date[LANGUAGE_NONE][0]['value']) : NULL;
  $to_date  = isset($node->field_from_date[LANGUAGE_NONE][0]['value2']) 
    ? strtotime($node->field_from_date[LANGUAGE_NONE][0]['value2']) : NULL;

  $to_date += 24*60*60; // Add a day.

  // query news articles and videos
  if (TRUE || ! isset($node->nid)) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', array('news', 'video'), 'IN')
      ->propertyCondition('status', 1)
      ->propertyCondition('language', $newsletter_lang)
      ->propertyCondition('created', $to_date, '<=')
      ->propertyCondition('created', $from_date, '>=')
      ->propertyOrderBy('created', 'DESC')
      ->range(0, FE_NEWSLETTER_MAX_ARTICLES);
    $result = $query->execute();

    if (isset($result['node'])) {
      // get nids which were specified
      $last_item = count($node->field_other_content[LANGUAGE_NONE]);
      $nids = array();
      if ($last_item > 0) {
        foreach($node->field_other_content[LANGUAGE_NONE] as $existing_content) {
          $nids[$existing_content['nid']] = $existing_content['nid'];
        }
      }

      // Add other nids
      $item_nids = array_keys($result['node']);
      foreach($item_nids as $nid) {
        $nids[$nid] = $nid;
      }

      // Overwrite nids
      $field_content = array();
      foreach($nids as $nid) {
        $field_content[] = array('nid' => $nid);
      }
      $node->field_other_content[LANGUAGE_NONE] = $field_content;
    }

    // add advertisements
    $num_ads = isset($node->field_number_of_advertisements[0]['value']) ? $node->field_number_of_advertisements[0]['value'] : 0;

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', array('news', 'video'), 'IN')
      ->propertyCondition('status', 1)
      ->propertyCondition('language', $newsletter_lang)
      ->propertyOrderBy('sticky', 'DESC')
      ->propertyOrderBy('created', 'DESC')
      ->range(0, $num_ads);
    $result = $query->execute();

    if (isset($result['node'])) {
      // Add other nids
      $item_nids = array_keys($result['node']);
      $i = 0;
      foreach($item_nids as $nid) {
        $node->field_advertisements[LANGUAGE_NONE][$i++]['nid'] = $nid;
      }
    }
  }
}

