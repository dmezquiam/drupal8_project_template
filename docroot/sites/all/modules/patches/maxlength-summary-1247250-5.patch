diff --git a/maxlength.module b/maxlength.module
old mode 100644
new mode 100755
index 2473fbb..cc7c7af
--- a/maxlength.module
+++ b/maxlength.module
@@ -42,6 +42,24 @@ function maxlength_pre_render($element) {
  * Implements hook_form_FORM_ID_alter().
  */
 function maxlength_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
+  // Add an optional maxlength for teaser field.
+  if ($form['#instance']['widget']['type'] == 'text_textarea_with_summary') {
+    $form['instance']['widget']['settings']['maxlength_js_summary'] = array(
+      '#type' => 'textfield',
+      '#title' => 'Summary Maxlength JS',
+      '#description' => t('The maximum length of the field in characters.'),
+      '#default_value' => isset($form['#instance']['widget']['settings']['maxlength_js_summary']) ? $form['#instance']['widget']['settings']['maxlength_js_summary'] : NULL,
+    );
+    
+    $form['instance']['widget']['settings']['maxlength_js_label_summary'] = array(
+      '#type' => 'textarea',
+      '#rows' => 2,
+      '#title' => t('Summary count down message'),
+      '#default_value' =>  isset($form['#instance']['widget']['settings']['maxlength_js_label_summary']) ? $form['#instance']['widget']['settings']['maxlength_js_label_summary'] : MAXLENGTH_DEFAULT_JS_LABEL,
+      '#description' => t('The text used in the Javascript message under the input, where "@limit", "@remaining" and "@count" are replaced by the appropriate numbers.'),
+    );
+  }
+  
   // Add settings for textarea widgets
   $fields = array('text_textarea_with_summary', 'text_textarea');
   if (in_array($form['#instance']['widget']['type'], $fields)) {
@@ -96,7 +114,7 @@ function maxlength_field_attach_form($entity_type, $entity, &$form, &$form_state
   $fields = field_info_instances($entity_type, $form['#bundle']);
   // Check if any of the fields has a #maxlength_js setting
   foreach ($fields as $field_name => $value) {
-    if (isset($value['widget']['settings']['maxlength_js']) && $value['widget']['settings']['maxlength_js'] > 0) {
+    if (isset($value['widget']['settings']['maxlength_js'])) {
       $elements[$field_name] = $value;
     }
   }
@@ -123,26 +141,36 @@ function _maxlength_children(&$element, $ms_elements) {
   foreach ($children as $child) {
     // Check if the field settings for maxlength_js are set and add the maxlength and the label text.
     if (isset($element[$child]['#field_name']) && isset($ms_elements[$element[$child]['#field_name']])) {
-      $element[$child]['#maxlength'] = isset($element[$child]['#maxlength']) ? $element[$child]['#maxlength'] : $ms_elements[$element[$child]['#field_name']]['widget']['settings']['maxlength_js'];
-      $element[$child]['#maxlength_js'] = TRUE;
+      $settings = $ms_elements[$element[$child]['#field_name']]['widget']['settings'];
+      if ($settings['maxlength_js'] > 0) {
+        _maxlength_add_maxlength_attributes($element[$child], $settings);
 
-      $maxlength_js_label = !empty($ms_elements[$element[$child]['#field_name']]['widget']['settings']['maxlength_js_label']) ?
-        $ms_elements[$element[$child]['#field_name']]['widget']['settings']['maxlength_js_label'] : MAXLENGTH_DEFAULT_JS_LABEL;
-      $maxlength_js_label = t($maxlength_js_label);
-      $element[$child]['#attributes']['maxlength_js_label'] = array($maxlength_js_label);
-    }
-    if (isset($element[$child]['#field_name']) && isset($ms_elements[$element[$child]['#field_name']]['widget']['settings']['maxlength_js_enforce']) &&
-        $ms_elements[$element[$child]['#field_name']]['widget']['settings']['maxlength_js_enforce']) {
-      $element[$child]['#maxlength_js_enforce'] = TRUE;
-    }
-    if (isset($element[$child]['#field_name']) && isset($ms_elements[$element[$child]['#field_name']]['widget']['settings']['maxlength_js_truncate_html']) &&
-        $ms_elements[$element[$child]['#field_name']]['widget']['settings']['maxlength_js_truncate_html']) {
-      $element[$child]['#maxlength_js_truncate_html'] = TRUE;
+        if (isset($settings['maxlength_js_enforce']) && $settings['maxlength_js_enforce']) {
+          $element[$child]['#maxlength_js_enforce'] = TRUE;
+        }
+        if (isset($settings['maxlength_js_truncate_html']) && $settings['maxlength_js_truncate_html']) {
+          $element[$child]['#maxlength_js_truncate_html'] = TRUE;
+        }
+      }
+
+      if (isset($element[$child]['summary']) && isset($settings['maxlength_js_summary']) 
+        && $settings['maxlength_js_summary'] > 0) {
+        _maxlength_add_maxlength_attributes($element[$child]['summary'], $settings, '_summary');
+      }   
     }
     _maxlength_children($element[$child], $ms_elements);
   }
 }
 
+function _maxlength_add_maxlength_attributes(&$element, $settings, $suffix = '') {
+  $element['#maxlength'] = isset($element['#maxlength']) ? $element['#maxlength'] : $settings['maxlength_js' . $suffix];
+  $element['#maxlength_js'] = TRUE;
+
+  $maxlength_js_label = !empty($settings['maxlength_js_label']) ? $settings['maxlength_js_label' . $suffix] : MAXLENGTH_DEFAULT_JS_LABEL;
+  $maxlength_js_label = t($maxlength_js_label);
+  $element['#attributes']['maxlength_js_label'] = array($maxlength_js_label);
+}
+
 /**
  * Process handler for the form elements that can have maxlength attribute.
  */
